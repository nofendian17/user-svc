// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	authorization "auth-svc/src/infrastructure/authorization"
	context "context"

	jwt "github.com/dgrijalva/jwt-go"

	mock "github.com/stretchr/testify/mock"

	redis "auth-svc/src/infrastructure/redis"

	user "auth-svc/src/domain/user"
)

// AuthorizationService is an autogenerated mock type for the AuthorizationService type
type AuthorizationService struct {
	mock.Mock
}

// AccessTokenValid provides a mock function with given fields: signedToken
func (_m *AuthorizationService) AccessTokenValid(signedToken string) error {
	ret := _m.Called(signedToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(signedToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMetaData provides a mock function with given fields: ctx, accessDetail
func (_m *AuthorizationService) DeleteMetaData(ctx context.Context, accessDetail *authorization.AccessDetail) error {
	ret := _m.Called(ctx, accessDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *authorization.AccessDetail) error); ok {
		r0 = rf(ctx, accessDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtractAccessTokenMetaData provides a mock function with given fields: signedToken
func (_m *AuthorizationService) ExtractAccessTokenMetaData(signedToken string) (*authorization.AccessDetail, error) {
	ret := _m.Called(signedToken)

	var r0 *authorization.AccessDetail
	if rf, ok := ret.Get(0).(func(string) *authorization.AccessDetail); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.AccessDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractRefreshTokenMetaData provides a mock function with given fields: signedToken
func (_m *AuthorizationService) ExtractRefreshTokenMetaData(signedToken string) (*authorization.AccessDetail, error) {
	ret := _m.Called(signedToken)

	var r0 *authorization.AccessDetail
	if rf, ok := ret.Get(0).(func(string) *authorization.AccessDetail); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.AccessDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractToken provides a mock function with given fields: signedToken
func (_m *AuthorizationService) ExtractToken(signedToken string) string {
	ret := _m.Called(signedToken)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(signedToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateToken provides a mock function with given fields: _a0
func (_m *AuthorizationService) GenerateToken(_a0 user.User) (*authorization.TokenDetail, error) {
	ret := _m.Called(_a0)

	var r0 *authorization.TokenDetail
	if rf, ok := ret.Get(0).(func(user.User) *authorization.TokenDetail); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.TokenDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetaData provides a mock function with given fields: ctx, accessDetail
func (_m *AuthorizationService) GetMetaData(ctx context.Context, accessDetail *authorization.AccessDetail) (*redis.CacheContainer, error) {
	ret := _m.Called(ctx, accessDetail)

	var r0 *redis.CacheContainer
	if rf, ok := ret.Get(0).(func(context.Context, *authorization.AccessDetail) *redis.CacheContainer); ok {
		r0 = rf(ctx, accessDetail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.CacheContainer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *authorization.AccessDetail) error); ok {
		r1 = rf(ctx, accessDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenValid provides a mock function with given fields: signedToken
func (_m *AuthorizationService) RefreshTokenValid(signedToken string) error {
	ret := _m.Called(signedToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(signedToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMetaData provides a mock function with given fields: ctx, userID, tokenDetail
func (_m *AuthorizationService) SaveMetaData(ctx context.Context, userID string, tokenDetail *authorization.TokenDetail) error {
	ret := _m.Called(ctx, userID, tokenDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *authorization.TokenDetail) error); ok {
		r0 = rf(ctx, userID, tokenDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyAccessToken provides a mock function with given fields: signedToken
func (_m *AuthorizationService) VerifyAccessToken(signedToken string) (*jwt.Token, error) {
	ret := _m.Called(signedToken)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyRefreshToken provides a mock function with given fields: signedToken
func (_m *AuthorizationService) VerifyRefreshToken(signedToken string) (*jwt.Token, error) {
	ret := _m.Called(signedToken)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(signedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(signedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthorizationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizationService creates a new instance of AuthorizationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizationService(t mockConstructorTestingTNewAuthorizationService) *AuthorizationService {
	mock := &AuthorizationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
